#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.3
#  in conjunction with Tcl version 8.6
#    Jun 27, 2020 05:15:24 AM +07  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from app import dbc_support

from tkinter import PhotoImage, messagebox
import base64

from converters.ac_to_txt import convert_ac_to_txt
from converters.txt_to_ac import convert_txt_to_ac
from converters.txt_to_pg import convert_txt_to_pg
from converters.pg_to_txt import convert_pg_to_txt
from converters.ac_to_pg import convert_ac_to_pg
from converters.pg_to_ac import convert_pg_to_ac

from config.text import IMPORT_DIRECTORY_PATH_REMOTE, IMPORT_DIRECTORY_PATH_LOCAL, EXPORT_DIRECTORY_PATH_LOCAL


def get_import_path():
    import_local_path = dbc_support.import_path.get() if dbc_support.import_path.get() else IMPORT_DIRECTORY_PATH_LOCAL
    return IMPORT_DIRECTORY_PATH_REMOTE if dbc_support.from_git.get() else import_local_path


def get_export_path():
    return dbc_support.export_path.get() if dbc_support.export_path.get() else EXPORT_DIRECTORY_PATH_LOCAL


def button_convert_ac_to_txt(event):
    convert_ac_to_txt()
    messagebox.showinfo('from access to text', 'Export completed successfully!')


def button_convert_txt_to_ac(event):
    source = get_import_path()
    convert_txt_to_ac(source_path=source)
    messagebox.showinfo('from text to access', f'Export completed successfully from {source}!')


def button_convert_txt_to_pg(event):
    source = get_import_path()
    try:
        convert_txt_to_pg(source_path=source)
    except AttributeError:
        messagebox.showwarning('from text to postgres', f'Cannot find Postgres database!\nPlease specify URI.')
    else:
        messagebox.showinfo('from text to postgres', f'Export completed successfully from {source}!')


def button_convert_ac_to_pg(event):
    # source = IMPORT_DIRECTORY_PATH_REMOTE if dbc_support.che46.get() else IMPORT_DIRECTORY_PATH_LOCAL
    convert_ac_to_pg()
    messagebox.showinfo('from access to postgres', f'Export completed successfully!')


def button_convert_pg_to_ac(event):
    # source = IMPORT_DIRECTORY_PATH_REMOTE if dbc_support.che46.get() else IMPORT_DIRECTORY_PATH_LOCAL
    convert_pg_to_ac()
    messagebox.showinfo('from postgres to access', f'Export completed successfully!')


def button_convert_pg_to_txt(event):
    # source = IMPORT_DIRECTORY_PATH_REMOTE if dbc_support.che46.get() else IMPORT_DIRECTORY_PATH_LOCAL
    convert_pg_to_txt()
    messagebox.showinfo('from postgres to text', f'Export completed successfully!')


def on_change(element):
    return element.widget.get()


def vp_start_gui():
    global val, w, root
    root = tk.Tk()
    icon = 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAABGdBTUEAALGPC/xhBQAAACBjSFJN' \
           'AAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAABNVBMVEUAAABkokZ0r1N3slV2' \
           'sVV3slR5s1M9cR13slQ+cRx3slV0sVM9cRxQhi53sVV3sVV2sVhAgAA+cR0+chw+cRx3slV3slVV' \
           'qlWAn0B3sVJ1sVR5sVU3bxZtqk93slV3sVR2slV3s1V3s1V3sFV3slV3slR3sFN1sVR3slVmzGZ0' \
           'okZ2sFV3sVRgn0A+ch05cRx3slZ2slc7chs+chw+cR12s1V3sVV3slV2sVV4slYAAAB4s1R2rVI+' \
           'cx0+ch08chtelj08cBx2slR2sVRbkzpooUZ1slQ+chx4slR3s1aAr1B3slV0rlV3sVVttkl3slZj' \
           'nEE9ch13sVR3tFVmoEk8bhk9cBl2s1V3sVN5s1V2slKAv0B5slV5tlVRhy93slU+ch1spkpQhi9o' \
           'oUZ1sFNHfCX///+WtFy5AAAAXnRSTlMAIbbDxMMou6la/S6r/cG0GgRz84fK6QMIPnxOFyrHmrf3' \
           'uy2s9UdV9AULVJQIVwmYODjOgzb95bFZAXkc4/gmm0CReaOamPSRaxDnOeMHVv7xdmkjMzJ1ZTk4' \
           'BF0Vpi9+UAAAAAFiS0dEZizU2SUAAAAHdElNRQfkBhsBCw3V3hlLAAAAyElEQVQY02NgAAFGJmYW' \
           'VjYGBGCPi4+P50DwORMSEuPjubjhAjwJCbxAJXz8AlABQSFhEVGgiJg4mCshKSUtIysHFJAH8xUU' \
           '4+OVGJRVVOPj1cAC6kApDU0GBi1tHV09faCAAVAg3hAkZWScYMLAYGoWH29uYclgZW1jm5BgZ88A' \
           'MszBkcHKKd7ZJSkpzpXBLT4+OcHdyiMeAjwZvLxTUhPcfaB8Xz8GBv+AhIRAhiCIQDDI8JDQMHsG' \
           'hvD4iMjIqGgkH8fEgikAm7UtvPE/wy8AAAAldEVYdGRhdGU6Y3JlYXRlADIwMjAtMDYtMjdUMDE6' \
           'MTE6MTMrMDA6MDC2HXIrAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIwLTA2LTI3VDAxOjExOjEzKzAw' \
           'OjAwx0DKlwAAAABJRU5ErkJggg=='
    img = PhotoImage(data=base64.b64decode(icon))
    root.wm_iconphoto(True, img)

    dbc_support.set_tk_variables()
    top = MainWindow(root)

    dbc_support.init(root, top)

    def trigger_git_local_import(event):
        top.import_path.configure(state="normal") if \
            dbc_support.from_git.get() else top.import_path.configure(state="disable")

    top.BAT.bind('<ButtonRelease-1>', button_convert_ac_to_txt)
    top.BTA.bind('<ButtonRelease-1>', button_convert_txt_to_ac)
    top.BTP.bind('<ButtonRelease-1>', button_convert_txt_to_pg)
    top.BAP.bind('<ButtonRelease-1>', button_convert_ac_to_pg)
    top.BPA.bind('<ButtonRelease-1>', button_convert_pg_to_ac)
    top.BPT.bind('<ButtonRelease-1>', button_convert_pg_to_txt)
    top.is_from_github.bind('<Button-1>', trigger_git_local_import)

    root.mainloop()


w = None


class MainWindow:
    def __init__(self, top=None):
        """This class configures and populates the top level window.
           top is the top level containing window."""
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font9 = "-family {Segoe UI} -size 9"

        top.geometry("584x320+534+399")
        top.minsize(120, 1)
        top.maxsize(3460, 1181)
        top.resizable(1, 1)
        top.title("Loglan DB Converter")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.configuration = tk.LabelFrame(top)
        self.configuration.place(
            relx=0.017, rely=0.031, relheight=0.609, relwidth=0.964)
        self.configuration.configure(relief='groove')
        self.configuration.configure(foreground="black")
        self.configuration.configure(text='''Configuration''')
        self.configuration.configure(background="#d9d9d9")
        self.configuration.configure(highlightbackground="#d9d9d9")
        self.configuration.configure(highlightcolor="black")

        default_entry_configuration = dict(
            background="white",
            disabledforeground="#a3a3a3",
            foreground="#000000",
            highlightbackground="#d9d9d9",
            highlightcolor="black",
            insertbackground="black",
            selectbackground="#c4c4c4",
            selectforeground="black",
            # state="readonly",
            font=font9, )

        default_button_configuration = dict(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            disabledforeground="#a3a3a3",
            foreground="#000000",
            highlightbackground="#d9d9d9",
            highlightcolor="black",
            pady="0", )

        default_label_configuration = dict(
            activebackground="#f9f9f9",
            activeforeground="black",
            background="#d9d9d9",
            disabledforeground="#a3a3a3",
            foreground="#000000",
            highlightbackground="#d9d9d9",
            highlightcolor="black", )

        self.postgres_uri = tk.Entry(self.configuration)
        self.postgres_uri.place(
            relx=0.178, rely=0.144, height=20,
            relwidth=0.789, bordermode='ignore')
        self.postgres_uri.configure(**default_entry_configuration)
        self.postgres_uri.configure(textvariable=dbc_support.postgres_uri)

        self.p_label = tk.Label(self.configuration)
        self.p_label.place(
            relx=0.02, rely=0.144, height=20,
            width=80, bordermode='ignore')

        self.p_label.configure(**default_label_configuration)
        self.p_label.configure(text='''Postgres URI''')

        self.access_path = tk.Entry(self.configuration)
        self.access_path.place(
            relx=0.178, rely=0.308, height=20,
            relwidth=0.789, bordermode='ignore')
        self.access_path.configure(**default_entry_configuration)
        self.access_path.configure(textvariable=dbc_support.access_path)

        self.a_label = tk.Label(self.configuration)
        self.a_label.place(
            relx=0.02, rely=0.308, height=20,
            width=75, bordermode='ignore')
        self.a_label.configure(**default_label_configuration)
        self.a_label.configure(text='''Access Path''')

        self.export_path = tk.Entry(self.configuration)
        self.export_path.place(
            relx=0.178, rely=0.513, height=20,
            relwidth=0.789, bordermode='ignore')
        self.export_path.configure(**default_entry_configuration)
        self.export_path.configure(textvariable=dbc_support.export_path)

        self.e_label = tk.Label(self.configuration)
        self.e_label.place(
            relx=0.036, rely=0.513, height=20,
            width=69, bordermode='ignore')
        self.e_label.configure(**default_label_configuration)
        self.e_label.configure(text='''Export Path''')

        self.import_path = tk.Entry(self.configuration)
        self.import_path.place(
            relx=0.178, rely=0.667, height=20,
            relwidth=0.789, bordermode='ignore')
        self.import_path.configure(**default_entry_configuration)
        self.import_path.configure(textvariable=dbc_support.import_path)
        self.import_path.configure(state="disable")

        self.i_label = tk.Label(self.configuration)
        self.i_label.place(
            relx=0.036, rely=0.667, height=21,
            width=69, bordermode='ignore')
        self.i_label.configure(**default_label_configuration)
        self.i_label.configure(text='''Import Path''')

        self.is_from_github = tk.Checkbutton(self.configuration)
        self.is_from_github.place(
            relx=0.178, rely=0.821, relheight=0.118,
            relwidth=0.316, bordermode='ignore')
        self.is_from_github.configure(activebackground="#ececec")
        self.is_from_github.configure(activeforeground="#000000")
        self.is_from_github.configure(background="#d9d9d9")
        self.is_from_github.configure(disabledforeground="#a3a3a3")
        self.is_from_github.configure(foreground="#000000")
        self.is_from_github.configure(highlightbackground="#d9d9d9")
        self.is_from_github.configure(highlightcolor="black")
        self.is_from_github.configure(justify='left')
        self.is_from_github.configure(text='''Use text files from Github''')
        self.is_from_github.configure(variable=dbc_support.from_git)

        self.BTP = tk.Button(top)
        self.BTP.place(relx=0.034, rely=0.719, height=24, width=147)
        self.BTP.configure(**default_button_configuration)
        self.BTP.configure(text='''text to postgres''')

        self.BTA = tk.Button(top)
        self.BTA.place(relx=0.034, rely=0.844, height=24, width=147)
        self.BTA.configure(**default_button_configuration)
        self.BTA.configure(text='''text to access''')

        self.BAP = tk.Button(top)
        self.BAP.place(relx=0.36, rely=0.719, height=24, width=147)
        self.BAP.configure(**default_button_configuration)
        self.BAP.configure(text='''access to postgres''')

        self.BAT = tk.Button(top)
        self.BAT.place(relx=0.36, rely=0.844, height=24, width=147)
        self.BAT.configure(**default_button_configuration)
        self.BAT.configure(text='''access to text''')

        self.BPA = tk.Button(top)
        self.BPA.place(relx=0.702, rely=0.719, height=24, width=147)
        self.BPA.configure(**default_button_configuration)
        self.BPA.configure(text='''postgres to access''')

        self.BPT = tk.Button(top)
        self.BPT.place(relx=0.702, rely=0.844, height=24, width=147)
        self.BPT.configure(**default_button_configuration)
        self.BPT.configure(text='''postgres to text''')


if __name__ == "__main__":
    vp_start_gui()
